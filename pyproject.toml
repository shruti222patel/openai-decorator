[tool.poetry]
name = "openai-decorator"
version = "0.1.3"
description = "This package allows you to genrate function paramater values by integrating OpenAI's API function capabilities through signature and docstring analysis."
authors = ["Shruti Patel <shruti222patel@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/shruti222patel/openai-decorator"
packages = [{include = "openai_decorator", from = "src"}]
keywords = ["openai", "decorator", "functions", "openai-functions", "openai-decorator", "openai-api", "openai-api-functions", "openai-api-decorator", "openai"]
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
openai = "^0.27.8"
docstring-parser = "^0.15"
requests = "^2.31.0"
tenacity = "^8.2.2"

[tool.poetry.scripts]
add-docstring = "openai_decorator.main:main"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.2"
bump2version = "^1.0.1"
pytest-mock = "^3.11.1"
exceptiongroup = { version="^1.1.1", markers="python_version <= '3.10'" }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:"
]
